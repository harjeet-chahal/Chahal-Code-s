package com.chahal;

import java.util.*;

public class DirectedGraphCycleDFS {
    public static void main(String[] args) {
        int V = 9;
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();

        for(int i=0;i<V+1;i++){
            graph.add(new ArrayList<>());
        }

        graph.get(1).add(2);

        graph.get(2).add(3);

        graph.get(3).add(4);
        graph.get(3).add(6);

        graph.get(4).add(5);

        graph.get(6).add(5);

        graph.get(7).add(2);
        graph.get(7).add(8);

        graph.get(8).add(9);

        graph.get(9).add(7);

        if(isCyclic(V, graph)){
            System.out.println("Directed Graph is cyclic.");
        }
        else{
            System.out.println("Directed Graph is acyclic.");
        }
    }

    static boolean isCyclic(int V, ArrayList<ArrayList<Integer>> graph){
        int[] vis = new int[V+1];
        int[] dfsvis = new int[V+1];

        for(int i=1;i<=V;i++){
            if(vis[i] == 0){
                if(checkCycle(i, graph, vis, dfsvis)){
                    return true;
                }
            }
        }
        return false;
    }

    static boolean checkCycle(int node, ArrayList<ArrayList<Integer>> graph, int[] vis, int[] dfsvis){
        vis[node] = 1;
        dfsvis[node] = 1;

        for(Integer it : graph.get(node)){
            if(vis[it] == 0){
                if(checkCycle(it, graph, vis, dfsvis) == true){
                    return true;
                }
                else if(dfsvis[it] == 1){
                    return true;
                }
            }
        }
        dfsvis[node] = 0;
        return false;
    }
}
